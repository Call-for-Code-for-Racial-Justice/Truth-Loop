{"ast":null,"code":"var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Close16 from '@carbon/icons-react/lib/close/16';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId;\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n    clearSelection(event);\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    // When a user hits ENTER, we'll clear the selection\n    if (event.keyCode === 13) {\n      clearSelection(event);\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: \"0\",\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    title: description\n  }, selectionCount, React.createElement(Close16, {\n    role: \"img\"\n  }));\n};\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/ListBox/ListBoxSelection.js"],"names":["_defaultTranslations","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","cx","React","PropTypes","Close16","settings","prefix","ListBoxSelection","_ref","_cx","clearSelection","selectionCount","t","translateWithId","className","concat","handleOnClick","event","stopPropagation","handleOnKeyDown","keyCode","description","createElement","role","tabIndex","onClick","onKeyDown","title","translationIds","defaultTranslations","propTypes","func","isRequired","number","defaultProps","id"],"mappings":"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","sourcesContent":["var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Close16 from '@carbon/icons-react/lib/close/16';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId;\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n    clearSelection(event);\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    // When a user hits ENTER, we'll clear the selection\n    if (event.keyCode === 13) {\n      clearSelection(event);\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: \"0\",\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    title: description\n  }, selectionCount, React.createElement(Close16, {\n    role: \"img\"\n  }));\n};\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;"]},"metadata":{},"sourceType":"module"}