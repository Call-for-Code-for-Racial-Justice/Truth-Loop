{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { initialSortState, getSortedState } from './sorting';\nimport normalize from '../tools/normalize';\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\n\nvar getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {\n  var _normalize = normalize(props.rows, props.headers, prevState),\n      rowIds = _normalize.rowIds,\n      rowsById = _normalize.rowsById,\n      cellsById = _normalize.cellsById;\n\n  var state = {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    var _getSortedState = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection),\n        _rowIds = _getSortedState.rowIds;\n\n    state.rowIds = _rowIds;\n  }\n\n  return state;\n};\n\nexport default getDerivedStateFromProps;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/DataTable/state/getDerivedStateFromProps.js"],"names":["initialSortState","getSortedState","normalize","getDerivedStateFromProps","props","prevState","_normalize","rows","headers","rowIds","rowsById","cellsById","state","sortDirection","sortHeaderKey","initialRowOrder","slice","filterInputValue","shouldShowBatchActions","_getSortedState","_rowIds"],"mappings":"AAAA;;;;;;AAMA,SAASA,gBAAT,EAA2BC,cAA3B,QAAiD,WAAjD;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA;;;;;;;;AAQA,IAAIC,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoD;AACjF,MAAIC,UAAU,GAAGJ,SAAS,CAACE,KAAK,CAACG,IAAP,EAAaH,KAAK,CAACI,OAAnB,EAA4BH,SAA5B,CAA1B;AAAA,MACII,MAAM,GAAGH,UAAU,CAACG,MADxB;AAAA,MAEIC,QAAQ,GAAGJ,UAAU,CAACI,QAF1B;AAAA,MAGIC,SAAS,GAAGL,UAAU,CAACK,SAH3B;;AAKA,MAAIC,KAAK,GAAG;AACVH,IAAAA,MAAM,EAAEA,MADE;AAEVC,IAAAA,QAAQ,EAAEA,QAFA;AAGVC,IAAAA,SAAS,EAAEA,SAHD;AAIVE,IAAAA,aAAa,EAAER,SAAS,CAACQ,aAAV,IAA2Bb,gBAJhC;AAKVc,IAAAA,aAAa,EAAET,SAAS,CAACS,aAAV,IAA2B,IALhC;AAMV;AACA;AACAC,IAAAA,eAAe,EAAEN,MAAM,CAACO,KAAP,EARP;AASVC,IAAAA,gBAAgB,EAAEZ,SAAS,CAACY,gBAAV,IAA8B,IATtC;AAUV;AACA;AACAC,IAAAA,sBAAsB,EAAEb,SAAS,CAACa,sBAAV,IAAoC;AAZlD,GAAZ;;AAeA,MAAIb,SAAS,CAACQ,aAAV,IAA2BR,SAAS,CAACS,aAAzC,EAAwD;AACtD,QAAIK,eAAe,GAAGlB,cAAc,CAACG,KAAD,EAAQQ,KAAR,EAAeP,SAAS,CAACS,aAAzB,EAAwCT,SAAS,CAACQ,aAAlD,CAApC;AAAA,QACIO,OAAO,GAAGD,eAAe,CAACV,MAD9B;;AAGAG,IAAAA,KAAK,CAACH,MAAN,GAAeW,OAAf;AACD;;AAED,SAAOR,KAAP;AACD,CA7BD;;AA+BA,eAAeT,wBAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { initialSortState, getSortedState } from './sorting';\nimport normalize from '../tools/normalize';\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\n\nvar getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {\n  var _normalize = normalize(props.rows, props.headers, prevState),\n      rowIds = _normalize.rowIds,\n      rowsById = _normalize.rowsById,\n      cellsById = _normalize.cellsById;\n\n  var state = {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    var _getSortedState = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection),\n        _rowIds = _getSortedState.rowIds;\n\n    state.rowIds = _rowIds;\n  }\n\n  return state;\n};\n\nexport default getDerivedStateFromProps;"]},"metadata":{},"sourceType":"module"}