{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// event.key\nexport var keyCodes = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  // IE11 Escape\n  IEESC: 'Esc',\n  SPACE: ' ',\n  PAGEUP: 'PageUp',\n  PAGEDOWN: 'PageDown',\n  END: 'End',\n  HOME: 'Home',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown'\n}; // event.which (DEPRECATED)\n\nexport var keys = {\n  TAB: 9,\n  ENTER: 13,\n  ESC: 27,\n  SPACE: 32,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import { keys, matches } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.ENTER, keys.SPACE]) {\n *     // ...\n *   }\n * }\n * @param {Event} event\n * @param {Array<number>} keysToMatch\n * @returns {boolean}\n */\n\nexport function matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (keysToMatch[i] === event.which || keysToMatch[i] === event.key) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import { keys, match } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.ENTER) {\n *     // ...\n *   }\n * }\n * @param {Event|number} eventOrCode\n * @param {number} key - the `which` value, should come from keys\n * @returns {boolean}\n */\n\nexport function match(eventOrCode, key) {\n  return eventOrCode.which === key || eventOrCode === key;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\nexport function getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/tools/key.js"],"names":["keyCodes","TAB","ENTER","ESC","IEESC","SPACE","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","keys","matches","event","keysToMatch","i","length","which","key","match","eventOrCode","getCharacterFor","String","fromCharCode","keyCode"],"mappings":"AAAA;;;;;;AAMA;AACA,OAAO,IAAIA,QAAQ,GAAG;AACpBC,EAAAA,GAAG,EAAE,KADe;AAEpBC,EAAAA,KAAK,EAAE,OAFa;AAGpBC,EAAAA,GAAG,EAAE,QAHe;AAIpB;AACAC,EAAAA,KAAK,EAAE,KALa;AAMpBC,EAAAA,KAAK,EAAE,GANa;AAOpBC,EAAAA,MAAM,EAAE,QAPY;AAQpBC,EAAAA,QAAQ,EAAE,UARU;AASpBC,EAAAA,GAAG,EAAE,KATe;AAUpBC,EAAAA,IAAI,EAAE,MAVc;AAWpBC,EAAAA,IAAI,EAAE,WAXc;AAYpBC,EAAAA,EAAE,EAAE,SAZgB;AAapBC,EAAAA,KAAK,EAAE,YAba;AAcpBC,EAAAA,IAAI,EAAE;AAdc,CAAf,C,CAeJ;;AAEH,OAAO,IAAIC,IAAI,GAAG;AAChBb,EAAAA,GAAG,EAAE,CADW;AAEhBC,EAAAA,KAAK,EAAE,EAFS;AAGhBC,EAAAA,GAAG,EAAE,EAHW;AAIhBE,EAAAA,KAAK,EAAE,EAJS;AAKhBC,EAAAA,MAAM,EAAE,EALQ;AAMhBC,EAAAA,QAAQ,EAAE,EANM;AAOhBC,EAAAA,GAAG,EAAE,EAPW;AAQhBC,EAAAA,IAAI,EAAE,EARU;AAShBC,EAAAA,IAAI,EAAE,EATU;AAUhBC,EAAAA,EAAE,EAAE,EAVY;AAWhBC,EAAAA,KAAK,EAAE,EAXS;AAYhBC,EAAAA,IAAI,EAAE;AAZU,CAAX;AAcP;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,WAAxB,EAAqC;AAC1C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAID,WAAW,CAACC,CAAD,CAAX,KAAmBF,KAAK,CAACI,KAAzB,IAAkCH,WAAW,CAACC,CAAD,CAAX,KAAmBF,KAAK,CAACK,GAA/D,EAAoE;AAClE,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;AACD;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,KAAT,CAAeC,WAAf,EAA4BF,GAA5B,EAAiC;AACtC,SAAOE,WAAW,CAACH,KAAZ,KAAsBC,GAAtB,IAA6BE,WAAW,KAAKF,GAApD;AACD;AACD;;;;;;;;AAQA,OAAO,SAASG,eAAT,CAAyBD,WAAzB,EAAsC;AAC3C,MAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOE,MAAM,CAACC,YAAP,CAAoBH,WAApB,CAAP;AACD;;AAED,SAAOA,WAAW,CAACF,GAAZ,IAAmBI,MAAM,CAACC,YAAP,CAAoBH,WAAW,CAACH,KAAZ,IAAqBG,WAAW,CAACI,OAArD,CAA1B;AACD","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// event.key\nexport var keyCodes = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  // IE11 Escape\n  IEESC: 'Esc',\n  SPACE: ' ',\n  PAGEUP: 'PageUp',\n  PAGEDOWN: 'PageDown',\n  END: 'End',\n  HOME: 'Home',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown'\n}; // event.which (DEPRECATED)\n\nexport var keys = {\n  TAB: 9,\n  ENTER: 13,\n  ESC: 27,\n  SPACE: 32,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import { keys, matches } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.ENTER, keys.SPACE]) {\n *     // ...\n *   }\n * }\n * @param {Event} event\n * @param {Array<number>} keysToMatch\n * @returns {boolean}\n */\n\nexport function matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (keysToMatch[i] === event.which || keysToMatch[i] === event.key) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import { keys, match } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.ENTER) {\n *     // ...\n *   }\n * }\n * @param {Event|number} eventOrCode\n * @param {number} key - the `which` value, should come from keys\n * @returns {boolean}\n */\n\nexport function match(eventOrCode, key) {\n  return eventOrCode.which === key || eventOrCode === key;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\nexport function getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}"]},"metadata":{},"sourceType":"module"}