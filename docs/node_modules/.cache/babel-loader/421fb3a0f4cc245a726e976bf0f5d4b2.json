{"ast":null,"code":"var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChevronDown16 from '@carbon/icons-react/lib/chevron--down/16';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close menu'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open menu'), _defaultTranslations);\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxMenuIcon = function ListBoxMenuIcon(_ref) {\n  var _cx;\n\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId;\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen), _cx));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return React.createElement(\"div\", {\n    className: className,\n    role: \"button\"\n  }, React.createElement(ChevronDown16, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, React.createElement(\"title\", null, description)));\n};\n\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxMenuIcon;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/ListBox/ListBoxMenuIcon.js"],"names":["_defaultTranslations","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","cx","React","PropTypes","ChevronDown16","settings","prefix","translationIds","defaultTranslations","ListBoxMenuIcon","_ref","_cx","isOpen","t","translateWithId","className","concat","description","createElement","role","name","propTypes","bool","isRequired","func","defaultProps","id"],"mappings":"AAAA,IAAIA,oBAAJ;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;AAEjN;;;;;;;;AAMA,OAAOQ,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,OAAO,IAAIC,cAAc,GAAG;AAC1B,gBAAc,YADY;AAE1B,eAAa;AAFa,CAArB;AAIP,IAAIC,mBAAmB,IAAIjB,oBAAoB,GAAG,EAAvB,EAA2BC,eAAe,CAACD,oBAAD,EAAuBgB,cAAc,CAAC,YAAD,CAArC,EAAqD,YAArD,CAA1C,EAA8Gf,eAAe,CAACD,oBAAD,EAAuBgB,cAAc,CAAC,WAAD,CAArC,EAAoD,WAApD,CAA7H,EAA+LhB,oBAAnM,CAAvB;AACA;;;;;AAKA,IAAIkB,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AACnD,MAAIC,GAAJ;;AAEA,MAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AAAA,MACIC,CAAC,GAAGH,IAAI,CAACI,eADb;AAEA,MAAIC,SAAS,GAAGd,EAAE,EAAEU,GAAG,GAAG,EAAN,EAAUnB,eAAe,CAACmB,GAAD,EAAM,GAAGK,MAAH,CAAUV,MAAV,EAAkB,uBAAlB,CAAN,EAAkD,IAAlD,CAAzB,EAAkFd,eAAe,CAACmB,GAAD,EAAM,GAAGK,MAAH,CAAUV,MAAV,EAAkB,6BAAlB,CAAN,EAAwDM,MAAxD,CAAjG,EAAkKD,GAApK,EAAlB;AACA,MAAIM,WAAW,GAAGL,MAAM,GAAGC,CAAC,CAAC,YAAD,CAAJ,GAAqBA,CAAC,CAAC,WAAD,CAA9C;AACA,SAAOX,KAAK,CAACgB,aAAN,CAAoB,KAApB,EAA2B;AAChCH,IAAAA,SAAS,EAAEA,SADqB;AAEhCI,IAAAA,IAAI,EAAE;AAF0B,GAA3B,EAGJjB,KAAK,CAACgB,aAAN,CAAoBd,aAApB,EAAmC;AACpCgB,IAAAA,IAAI,EAAE,eAD8B;AAEpC,kBAAcH;AAFsB,GAAnC,EAGAf,KAAK,CAACgB,aAAN,CAAoB,OAApB,EAA6B,IAA7B,EAAmCD,WAAnC,CAHA,CAHI,CAAP;AAOD,CAdD;;AAgBAR,eAAe,CAACY,SAAhB,GAA4B;AAC1B;;;;AAIAT,EAAAA,MAAM,EAAET,SAAS,CAACmB,IAAV,CAAeC,UALG;;AAO1B;;;;;AAKAT,EAAAA,eAAe,EAAEX,SAAS,CAACqB,IAAV,CAAeD;AAZN,CAA5B;AAcAd,eAAe,CAACgB,YAAhB,GAA+B;AAC7BX,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBY,EAAzB,EAA6B;AAC5C,WAAOlB,mBAAmB,CAACkB,EAAD,CAA1B;AACD;AAH4B,CAA/B;AAKA,eAAejB,eAAf","sourcesContent":["var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChevronDown16 from '@carbon/icons-react/lib/chevron--down/16';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close menu'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open menu'), _defaultTranslations);\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxMenuIcon = function ListBoxMenuIcon(_ref) {\n  var _cx;\n\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId;\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen), _cx));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return React.createElement(\"div\", {\n    className: className,\n    role: \"button\"\n  }, React.createElement(ChevronDown16, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, React.createElement(\"title\", null, description)));\n};\n\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxMenuIcon;"]},"metadata":{},"sourceType":"module"}