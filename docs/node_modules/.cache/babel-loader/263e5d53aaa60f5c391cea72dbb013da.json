{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Children } from 'react';\nimport createChainableTypeChecker from './tools/createChainableTypeChecker';\nimport getDisplayName from './tools/getDisplayName';\n/**\n * `childrenOf` is used for asserting that the children of a given React\n * component are of a given set of types. Currently, this will work with types\n * that are Stateless Functional and Class-based components\n *\n * This prop validator also supports chaining through `isRequired`\n */\n\nvar childrenOf = function childrenOf(expectedChildTypes) {\n  // Support both React elements and components by using `type` if it exists\n  var expectedDisplayNames = expectedChildTypes.map(function (child) {\n    return getDisplayName(child.type || child);\n  }).join(', ');\n\n  var validate = function validate(props, propName, componentName) {\n    Children.forEach(props[propName], function (child) {\n      if (!child) {\n        return;\n      }\n\n      var childDisplayName = getDisplayName(child.type || child);\n\n      if (!expectedChildTypes.includes(child.type)) {\n        throw new Error(\"Invalid prop `children` of type `\".concat(childDisplayName, \"` \") + \"supplied to `\".concat(componentName, \"`, expected each child to be one \") + \"of: `[\".concat(expectedDisplayNames, \"]`.\"));\n      }\n    });\n  };\n\n  return createChainableTypeChecker(validate);\n};\n\nexport default childrenOf;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/prop-types/childrenOf.js"],"names":["Children","createChainableTypeChecker","getDisplayName","childrenOf","expectedChildTypes","expectedDisplayNames","map","child","type","join","validate","props","propName","componentName","forEach","childDisplayName","includes","Error","concat"],"mappings":"AAAA;;;;;;AAMA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,0BAAP,MAAuC,oCAAvC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA;;;;;;;;AAQA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,kBAApB,EAAwC;AACvD;AACA,MAAIC,oBAAoB,GAAGD,kBAAkB,CAACE,GAAnB,CAAuB,UAAUC,KAAV,EAAiB;AACjE,WAAOL,cAAc,CAACK,KAAK,CAACC,IAAN,IAAcD,KAAf,CAArB;AACD,GAF0B,EAExBE,IAFwB,CAEnB,IAFmB,CAA3B;;AAIA,MAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkD;AAC/Db,IAAAA,QAAQ,CAACc,OAAT,CAAiBH,KAAK,CAACC,QAAD,CAAtB,EAAkC,UAAUL,KAAV,EAAiB;AACjD,UAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,UAAIQ,gBAAgB,GAAGb,cAAc,CAACK,KAAK,CAACC,IAAN,IAAcD,KAAf,CAArC;;AAEA,UAAI,CAACH,kBAAkB,CAACY,QAAnB,CAA4BT,KAAK,CAACC,IAAlC,CAAL,EAA8C;AAC5C,cAAM,IAAIS,KAAJ,CAAU,oCAAoCC,MAApC,CAA2CH,gBAA3C,EAA6D,IAA7D,IAAqE,gBAAgBG,MAAhB,CAAuBL,aAAvB,EAAsC,mCAAtC,CAArE,GAAkJ,SAASK,MAAT,CAAgBb,oBAAhB,EAAsC,KAAtC,CAA5J,CAAN;AACD;AACF,KAVD;AAWD,GAZD;;AAcA,SAAOJ,0BAA0B,CAACS,QAAD,CAAjC;AACD,CArBD;;AAuBA,eAAeP,UAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Children } from 'react';\nimport createChainableTypeChecker from './tools/createChainableTypeChecker';\nimport getDisplayName from './tools/getDisplayName';\n/**\n * `childrenOf` is used for asserting that the children of a given React\n * component are of a given set of types. Currently, this will work with types\n * that are Stateless Functional and Class-based components\n *\n * This prop validator also supports chaining through `isRequired`\n */\n\nvar childrenOf = function childrenOf(expectedChildTypes) {\n  // Support both React elements and components by using `type` if it exists\n  var expectedDisplayNames = expectedChildTypes.map(function (child) {\n    return getDisplayName(child.type || child);\n  }).join(', ');\n\n  var validate = function validate(props, propName, componentName) {\n    Children.forEach(props[propName], function (child) {\n      if (!child) {\n        return;\n      }\n\n      var childDisplayName = getDisplayName(child.type || child);\n\n      if (!expectedChildTypes.includes(child.type)) {\n        throw new Error(\"Invalid prop `children` of type `\".concat(childDisplayName, \"` \") + \"supplied to `\".concat(componentName, \"`, expected each child to be one \") + \"of: `[\".concat(expectedDisplayNames, \"]`.\"));\n      }\n    });\n  };\n\n  return createChainableTypeChecker(validate);\n};\n\nexport default childrenOf;"]},"metadata":{},"sourceType":"module"}