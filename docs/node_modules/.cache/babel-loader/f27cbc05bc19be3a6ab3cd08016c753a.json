{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {...Ref<Element>} refs List of React refs to merge.\n * @returns {Ref<Element>} Merged React ref.\n */\nvar mergeRefs = function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (el) {\n    refs.forEach(function (ref) {\n      // https://github.com/facebook/react/issues/13029#issuecomment-410002316\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (Object(ref) === ref) {\n        ref.current = el;\n      }\n    });\n  };\n};\n\nexport default mergeRefs;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/tools/mergeRefs.js"],"names":["mergeRefs","_len","arguments","length","refs","Array","_key","el","forEach","ref","Object","current"],"mappings":"AAAA;;;;;;;AAOA;;;;AAIA,IAAIA,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnC,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,SAAO,UAAUC,EAAV,EAAc;AACnBH,IAAAA,IAAI,CAACI,OAAL,CAAa,UAAUC,GAAV,EAAe;AAC1B;AACA,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACF,EAAD,CAAH;AACD,OAFD,MAEO,IAAIG,MAAM,CAACD,GAAD,CAAN,KAAgBA,GAApB,EAAyB;AAC9BA,QAAAA,GAAG,CAACE,OAAJ,GAAcJ,EAAd;AACD;AACF,KAPD;AAQD,GATD;AAUD,CAfD;;AAiBA,eAAeP,SAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {...Ref<Element>} refs List of React refs to merge.\n * @returns {Ref<Element>} Merged React ref.\n */\nvar mergeRefs = function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (el) {\n    refs.forEach(function (ref) {\n      // https://github.com/facebook/react/issues/13029#issuecomment-410002316\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (Object(ref) === ref) {\n        ref.current = el;\n      }\n    });\n  };\n};\n\nexport default mergeRefs;"]},"metadata":{},"sourceType":"module"}