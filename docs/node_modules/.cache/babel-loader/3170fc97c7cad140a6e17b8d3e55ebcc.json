{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\n/**\n * Default implemention of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {Object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<Object>} config.headers\n * @param {Object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @returns {Array<string>} rowIds\n */\n\nexport var defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n      headers = _ref.headers,\n      cellsById = _ref.cellsById,\n      inputValue = _ref.inputValue;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = getCellId(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') return false;\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/DataTable/tools/filter.js"],"names":["getCellId","defaultFilterRows","_ref","rowIds","headers","cellsById","inputValue","filter","rowId","some","_ref2","key","id","value","toLowerCase","includes"],"mappings":"AAAA;;;;;;AAMA,SAASA,SAAT,QAA0B,SAA1B;AACA;;;;;;;;;;;;;;AAcA,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC9D,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACI,UAHtB;AAIA,SAAOH,MAAM,CAACI,MAAP,CAAc,UAAUC,KAAV,EAAiB;AACpC,WAAOJ,OAAO,CAACK,IAAR,CAAa,UAAUC,KAAV,EAAiB;AACnC,UAAIC,GAAG,GAAGD,KAAK,CAACC,GAAhB;AACA,UAAIC,EAAE,GAAGZ,SAAS,CAACQ,KAAD,EAAQG,GAAR,CAAlB;AACA,UAAI,OAAON,SAAS,CAACO,EAAD,CAAT,CAAcC,KAArB,KAA+B,SAAnC,EAA8C,OAAO,KAAP;AAC9C,aAAO,CAAC,KAAKR,SAAS,CAACO,EAAD,CAAT,CAAcC,KAApB,EAA2BC,WAA3B,GAAyCC,QAAzC,CAAkDT,UAAU,CAACQ,WAAX,EAAlD,CAAP;AACD,KALM,CAAP;AAMD,GAPM,CAAP;AAQD,CAbM","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\n/**\n * Default implemention of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {Object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<Object>} config.headers\n * @param {Object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @returns {Array<string>} rowIds\n */\n\nexport var defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n      headers = _ref.headers,\n      cellsById = _ref.cellsById,\n      inputValue = _ref.inputValue;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = getCellId(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') return false;\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};"]},"metadata":{},"sourceType":"module"}