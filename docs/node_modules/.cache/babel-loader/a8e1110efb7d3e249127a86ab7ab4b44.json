{"ast":null,"code":"/**\n * Differentiate between keyboard and mouse-triggered focusout/blur events\n * @param {Element} node  The element to attach event listeners to\n * @param {string} name The event name to listen to\n * @param {Function} callback The callback function to invoke\n * @returns {Handle} The handle to release the attached event handler\n */\nexport default function onFocusByKeyboard(node, name, callback) {\n  var hasFocusout = ('onfocusout' in window);\n  var focusinEventName = hasFocusout ? 'focusin' : 'focus';\n  var focusoutEventName = hasFocusout ? 'focusout' : 'blur';\n  /**\n   * Event types supported by this function\n   * @type {Object<string, string>}\n   */\n\n  var supportedEvents = {\n    focus: focusinEventName,\n    blur: focusoutEventName\n  };\n  var eventName = supportedEvents[name];\n\n  if (!eventName) {\n    throw new Error('Unsupported event!');\n  }\n\n  var clicked;\n\n  var handleMousedown = function handleMousedown() {\n    clicked = true;\n    requestAnimationFrame(function () {\n      clicked = false;\n    });\n  };\n\n  var handleFocusin = function handleFocusin(evt) {\n    if (!clicked) {\n      callback(evt);\n    }\n  };\n\n  node.ownerDocument.addEventListener('mousedown', handleMousedown);\n  node.addEventListener(eventName, handleFocusin, !hasFocusout);\n  return {\n    release: function release() {\n      if (handleFocusin) {\n        node.removeEventListener(eventName, handleFocusin, !hasFocusout);\n        handleFocusin = null;\n      }\n\n      if (handleMousedown) {\n        node.ownerDocument.removeEventListener('mousedown', handleMousedown);\n        handleMousedown = null;\n      }\n\n      return null;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components/es/globals/js/misc/on-focus-by-keyboard.js"],"names":["onFocusByKeyboard","node","name","callback","hasFocusout","window","focusinEventName","focusoutEventName","supportedEvents","focus","blur","eventName","Error","clicked","handleMousedown","requestAnimationFrame","handleFocusin","evt","ownerDocument","addEventListener","release","removeEventListener"],"mappings":"AAAA;;;;;;;AAOA,eAAe,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiD;AAC9D,MAAIC,WAAW,IAAG,gBAAgBC,MAAnB,CAAf;AACA,MAAIC,gBAAgB,GAAGF,WAAW,GAAG,SAAH,GAAe,OAAjD;AACA,MAAIG,iBAAiB,GAAGH,WAAW,GAAG,UAAH,GAAgB,MAAnD;AACA;;;;;AAKA,MAAII,eAAe,GAAG;AACpBC,IAAAA,KAAK,EAAEH,gBADa;AAEpBI,IAAAA,IAAI,EAAEH;AAFc,GAAtB;AAIA,MAAII,SAAS,GAAGH,eAAe,CAACN,IAAD,CAA/B;;AAEA,MAAI,CAACS,SAAL,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,MAAIC,OAAJ;;AAEA,MAAIC,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/CD,IAAAA,OAAO,GAAG,IAAV;AACAE,IAAAA,qBAAqB,CAAC,YAAY;AAChCF,MAAAA,OAAO,GAAG,KAAV;AACD,KAFoB,CAArB;AAGD,GALD;;AAOA,MAAIG,aAAa,GAAG,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC9C,QAAI,CAACJ,OAAL,EAAc;AACZV,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACD;AACF,GAJD;;AAMAhB,EAAAA,IAAI,CAACiB,aAAL,CAAmBC,gBAAnB,CAAoC,WAApC,EAAiDL,eAAjD;AACAb,EAAAA,IAAI,CAACkB,gBAAL,CAAsBR,SAAtB,EAAiCK,aAAjC,EAAgD,CAACZ,WAAjD;AACA,SAAO;AACLgB,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,UAAIJ,aAAJ,EAAmB;AACjBf,QAAAA,IAAI,CAACoB,mBAAL,CAAyBV,SAAzB,EAAoCK,aAApC,EAAmD,CAACZ,WAApD;AACAY,QAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,UAAIF,eAAJ,EAAqB;AACnBb,QAAAA,IAAI,CAACiB,aAAL,CAAmBG,mBAAnB,CAAuC,WAAvC,EAAoDP,eAApD;AACAA,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,aAAO,IAAP;AACD;AAbI,GAAP;AAeD","sourcesContent":["/**\n * Differentiate between keyboard and mouse-triggered focusout/blur events\n * @param {Element} node  The element to attach event listeners to\n * @param {string} name The event name to listen to\n * @param {Function} callback The callback function to invoke\n * @returns {Handle} The handle to release the attached event handler\n */\nexport default function onFocusByKeyboard(node, name, callback) {\n  var hasFocusout = 'onfocusout' in window;\n  var focusinEventName = hasFocusout ? 'focusin' : 'focus';\n  var focusoutEventName = hasFocusout ? 'focusout' : 'blur';\n  /**\n   * Event types supported by this function\n   * @type {Object<string, string>}\n   */\n\n  var supportedEvents = {\n    focus: focusinEventName,\n    blur: focusoutEventName\n  };\n  var eventName = supportedEvents[name];\n\n  if (!eventName) {\n    throw new Error('Unsupported event!');\n  }\n\n  var clicked;\n\n  var handleMousedown = function handleMousedown() {\n    clicked = true;\n    requestAnimationFrame(function () {\n      clicked = false;\n    });\n  };\n\n  var handleFocusin = function handleFocusin(evt) {\n    if (!clicked) {\n      callback(evt);\n    }\n  };\n\n  node.ownerDocument.addEventListener('mousedown', handleMousedown);\n  node.addEventListener(eventName, handleFocusin, !hasFocusout);\n  return {\n    release: function release() {\n      if (handleFocusin) {\n        node.removeEventListener(eventName, handleFocusin, !hasFocusout);\n        handleFocusin = null;\n      }\n\n      if (handleMousedown) {\n        node.ownerDocument.removeEventListener('mousedown', handleMousedown);\n        handleMousedown = null;\n      }\n\n      return null;\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}