{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Children } from 'react';\nimport createChainableTypeChecker from './tools/createChainableTypeChecker';\nimport getDisplayName from './tools/getDisplayName';\n/**\n * `childrenOfType` is used for asserting that children of a given React\n * component are only of a given type. Currently, this supports React elements,\n * Stateless Functional Components, and Class-based components.\n *\n * This prop validator also supports chaining through `isRequired`\n */\n\nvar childrenOfType = function childrenOfType(expectedChildType) {\n  var expectedDisplayName = getDisplayName( // Support both React elements and components by using `type` if it exists\n  expectedChildType.type || expectedChildType);\n\n  var validate = function validate(props, propName, componentName) {\n    Children.forEach(props[propName], function (child) {\n      var childDisplayName = getDisplayName(child.type);\n\n      if (child.type !== expectedChildType.type && child.type !== expectedChildType) {\n        throw new Error(\"Invalid prop `children` of type `\".concat(childDisplayName, \"` \") + \"supplied to `\".concat(componentName, \"`, expected each child to be a \") + \"`\".concat(expectedDisplayName, \"` component.\"));\n      }\n    });\n  };\n\n  return createChainableTypeChecker(validate);\n};\n\nexport default childrenOfType;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/prop-types/childrenOfType.js"],"names":["Children","createChainableTypeChecker","getDisplayName","childrenOfType","expectedChildType","expectedDisplayName","type","validate","props","propName","componentName","forEach","child","childDisplayName","Error","concat"],"mappings":"AAAA;;;;;;AAMA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,0BAAP,MAAuC,oCAAvC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA;;;;;;;;AAQA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,iBAAxB,EAA2C;AAC9D,MAAIC,mBAAmB,GAAGH,cAAc,EAAE;AAC1CE,EAAAA,iBAAiB,CAACE,IAAlB,IAA0BF,iBADc,CAAxC;;AAGA,MAAIG,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkD;AAC/DV,IAAAA,QAAQ,CAACW,OAAT,CAAiBH,KAAK,CAACC,QAAD,CAAtB,EAAkC,UAAUG,KAAV,EAAiB;AACjD,UAAIC,gBAAgB,GAAGX,cAAc,CAACU,KAAK,CAACN,IAAP,CAArC;;AAEA,UAAIM,KAAK,CAACN,IAAN,KAAeF,iBAAiB,CAACE,IAAjC,IAAyCM,KAAK,CAACN,IAAN,KAAeF,iBAA5D,EAA+E;AAC7E,cAAM,IAAIU,KAAJ,CAAU,oCAAoCC,MAApC,CAA2CF,gBAA3C,EAA6D,IAA7D,IAAqE,gBAAgBE,MAAhB,CAAuBL,aAAvB,EAAsC,iCAAtC,CAArE,GAAgJ,IAAIK,MAAJ,CAAWV,mBAAX,EAAgC,cAAhC,CAA1J,CAAN;AACD;AACF,KAND;AAOD,GARD;;AAUA,SAAOJ,0BAA0B,CAACM,QAAD,CAAjC;AACD,CAfD;;AAiBA,eAAeJ,cAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Children } from 'react';\nimport createChainableTypeChecker from './tools/createChainableTypeChecker';\nimport getDisplayName from './tools/getDisplayName';\n/**\n * `childrenOfType` is used for asserting that children of a given React\n * component are only of a given type. Currently, this supports React elements,\n * Stateless Functional Components, and Class-based components.\n *\n * This prop validator also supports chaining through `isRequired`\n */\n\nvar childrenOfType = function childrenOfType(expectedChildType) {\n  var expectedDisplayName = getDisplayName( // Support both React elements and components by using `type` if it exists\n  expectedChildType.type || expectedChildType);\n\n  var validate = function validate(props, propName, componentName) {\n    Children.forEach(props[propName], function (child) {\n      var childDisplayName = getDisplayName(child.type);\n\n      if (child.type !== expectedChildType.type && child.type !== expectedChildType) {\n        throw new Error(\"Invalid prop `children` of type `\".concat(childDisplayName, \"` \") + \"supplied to `\".concat(componentName, \"`, expected each child to be a \") + \"`\".concat(expectedDisplayName, \"` component.\"));\n      }\n    });\n  };\n\n  return createChainableTypeChecker(validate);\n};\n\nexport default childrenOfType;"]},"metadata":{},"sourceType":"module"}