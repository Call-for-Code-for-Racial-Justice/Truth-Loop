{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar ProgressIndicator = /*#__PURE__*/function (_mixin) {\n  _inherits(ProgressIndicator, _mixin);\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {Object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n\n\n  function ProgressIndicator(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProgressIndicator).call(this, element, options));\n    /**\n     * The component state.\n     * @type {Object}\n     */\n\n    _this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: _this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: _this.getSteps().length\n    };\n\n    _this.addOverflowTooltip();\n\n    return _this;\n  }\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n\n  _createClass(ProgressIndicator, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return toArray(this.element.querySelectorAll(this.options.selectorStepElement)).map(function (element, index) {\n        return {\n          element: element,\n          index: index\n        };\n      });\n    }\n    /**\n     * Returns current step; gives detail about element and index.\n     */\n\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var currentEl = this.element.querySelector(this.options.selectorCurrent);\n      return this.getSteps().filter(function (step) {\n        return step.element === currentEl;\n      })[0];\n    }\n    /**\n     * Sets the current step.\n     * * @param {Number} new step index or use default in `this.state.currentIndex`.\n     */\n\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent() {\n      var _this2 = this;\n\n      var newCurrentStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentIndex;\n      var changed = false;\n\n      if (newCurrentStep !== this.state.currentIndex) {\n        this.state.currentIndex = newCurrentStep;\n        changed = true;\n      }\n\n      if (changed) {\n        this.getSteps().forEach(function (step) {\n          if (step.index < newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classComplete,\n              html: _this2._getSVGComplete()\n            });\n          }\n\n          if (step.index === newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classCurrent,\n              html: _this2._getCurrentSVG()\n            });\n          }\n\n          if (step.index > newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classIncomplete,\n              html: _this2._getIncompleteSVG()\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Update step with correct inline SVG and className\n     * @param {Object} args\n     * @param {Object} [args.element] target element\n     * @param {Object} [args.className] new className\n     * @param {Object} [args.html] new inline SVG to insert\n     */\n\n  }, {\n    key: \"_updateStep\",\n    value: function _updateStep(args) {\n      var element = args.element,\n          className = args.className,\n          html = args.html;\n\n      if (element.firstElementChild) {\n        element.removeChild(element.firstElementChild);\n      }\n\n      if (!element.classList.contains(className)) {\n        element.setAttribute('class', this.options.classStep);\n        element.classList.add(className);\n      }\n\n      element.insertAdjacentHTML('afterbegin', html);\n    }\n    /**\n     * Returns HTML string for an SVG used to represent a compelted step (checkmark)\n     */\n\n  }, {\n    key: \"_getSVGComplete\",\n    value: function _getSVGComplete() {\n      return \"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <polygon points=\\\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\\\"></polygon>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n     */\n\n  }, {\n    key: \"_getCurrentSVG\",\n    value: function _getCurrentSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\"></circle>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent incomple step (grey empty circle)\n     */\n\n  }, {\n    key: \"_getIncompleteSVG\",\n    value: function _getIncompleteSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n      </svg>\";\n    }\n  }, {\n    key: \"addOverflowTooltip\",\n    value: function addOverflowTooltip() {\n      var _this3 = this;\n\n      var stepLabels = toArray(this.element.querySelectorAll(this.options.selectorLabel));\n      var tooltips = toArray(this.element.querySelectorAll(this.options.selectorTooltip));\n      stepLabels.forEach(function (step) {\n        if (step.scrollWidth > _this3.options.maxWidth) {\n          step.classList.add(_this3.options.classOverflowLabel);\n        }\n      });\n      tooltips.forEach(function (tooltip) {\n        var childText = tooltip.querySelector(_this3.options.selectorTooltipText);\n\n        if (childText.scrollHeight > _this3.options.tooltipMaxHeight) {\n          tooltip.classList.add(_this3.options.classTooltipMulti);\n        }\n      });\n    }\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n     * properties in this object are overriden for the instance being created.\n     * @member ProgressIndicator.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorStepElement] The CSS selector to find step elements.\n     * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n     * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n     * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n     * @property {string} [classStep] The className for a step element.\n     * @property {string} [classComplete] The className for a completed step element.\n     * @property {string} [classCurrent] The className for the current step element.\n     * @property {string} [classIncomplete] The className for a incomplete step element.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-progress]',\n        selectorStepElement: \".\".concat(prefix, \"--progress-step\"),\n        selectorCurrent: \".\".concat(prefix, \"--progress-step--current\"),\n        selectorIncomplete: \".\".concat(prefix, \"--progress-step--incomplete\"),\n        selectorComplete: \".\".concat(prefix, \"--progress-step--complete\"),\n        selectorLabel: \".\".concat(prefix, \"--progress-label\"),\n        selectorTooltip: \".\".concat(prefix, \"--tooltip\"),\n        selectorTooltipText: \".\".concat(prefix, \"--tooltip__text\"),\n        classStep: \"\".concat(prefix, \"--progress-step\"),\n        classComplete: \"\".concat(prefix, \"--progress-step--complete\"),\n        classCurrent: \"\".concat(prefix, \"--progress-step--current\"),\n        classIncomplete: \"\".concat(prefix, \"--progress-step--incomplete\"),\n        classOverflowLabel: \"\".concat(prefix, \"--progress-label-overflow\"),\n        classTooltipMulti: \"\".concat(prefix, \"--tooltip_multi\"),\n        maxWidth: 87,\n        tooltipMaxHeight: 21\n      };\n    }\n  }]);\n\n  ProgressIndicator.components = new WeakMap();\n  return ProgressIndicator;\n}(mixin(createComponent, initComponentBySearch));\n\nexport default ProgressIndicator;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components/es/components/progress-indicator/progress-indicator.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","settings","mixin","createComponent","initComponentBySearch","toArray","arrayLike","Array","slice","ProgressIndicator","_mixin","element","options","_this","state","currentIndex","getCurrent","index","totalSteps","getSteps","addOverflowTooltip","querySelectorAll","selectorStepElement","map","currentEl","querySelector","selectorCurrent","filter","step","setCurrent","_this2","newCurrentStep","arguments","undefined","changed","forEach","_updateStep","className","classComplete","html","_getSVGComplete","classCurrent","_getCurrentSVG","classIncomplete","_getIncompleteSVG","args","firstElementChild","removeChild","classList","contains","setAttribute","classStep","add","insertAdjacentHTML","_this3","stepLabels","selectorLabel","tooltips","selectorTooltip","scrollWidth","maxWidth","classOverflowLabel","tooltip","childText","selectorTooltipText","scrollHeight","tooltipMaxHeight","classTooltipMulti","get","prefix","selectorInit","concat","selectorIncomplete","selectorComplete","components","WeakMap"],"mappings":"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","sourcesContent":["function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar ProgressIndicator =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(ProgressIndicator, _mixin);\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {Object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n\n\n  function ProgressIndicator(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProgressIndicator).call(this, element, options));\n    /**\n     * The component state.\n     * @type {Object}\n     */\n\n    _this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: _this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: _this.getSteps().length\n    };\n\n    _this.addOverflowTooltip();\n\n    return _this;\n  }\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n\n  _createClass(ProgressIndicator, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return toArray(this.element.querySelectorAll(this.options.selectorStepElement)).map(function (element, index) {\n        return {\n          element: element,\n          index: index\n        };\n      });\n    }\n    /**\n     * Returns current step; gives detail about element and index.\n     */\n\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var currentEl = this.element.querySelector(this.options.selectorCurrent);\n      return this.getSteps().filter(function (step) {\n        return step.element === currentEl;\n      })[0];\n    }\n    /**\n     * Sets the current step.\n     * * @param {Number} new step index or use default in `this.state.currentIndex`.\n     */\n\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent() {\n      var _this2 = this;\n\n      var newCurrentStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentIndex;\n      var changed = false;\n\n      if (newCurrentStep !== this.state.currentIndex) {\n        this.state.currentIndex = newCurrentStep;\n        changed = true;\n      }\n\n      if (changed) {\n        this.getSteps().forEach(function (step) {\n          if (step.index < newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classComplete,\n              html: _this2._getSVGComplete()\n            });\n          }\n\n          if (step.index === newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classCurrent,\n              html: _this2._getCurrentSVG()\n            });\n          }\n\n          if (step.index > newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classIncomplete,\n              html: _this2._getIncompleteSVG()\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Update step with correct inline SVG and className\n     * @param {Object} args\n     * @param {Object} [args.element] target element\n     * @param {Object} [args.className] new className\n     * @param {Object} [args.html] new inline SVG to insert\n     */\n\n  }, {\n    key: \"_updateStep\",\n    value: function _updateStep(args) {\n      var element = args.element,\n          className = args.className,\n          html = args.html;\n\n      if (element.firstElementChild) {\n        element.removeChild(element.firstElementChild);\n      }\n\n      if (!element.classList.contains(className)) {\n        element.setAttribute('class', this.options.classStep);\n        element.classList.add(className);\n      }\n\n      element.insertAdjacentHTML('afterbegin', html);\n    }\n    /**\n     * Returns HTML string for an SVG used to represent a compelted step (checkmark)\n     */\n\n  }, {\n    key: \"_getSVGComplete\",\n    value: function _getSVGComplete() {\n      return \"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <polygon points=\\\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\\\"></polygon>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n     */\n\n  }, {\n    key: \"_getCurrentSVG\",\n    value: function _getCurrentSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\"></circle>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent incomple step (grey empty circle)\n     */\n\n  }, {\n    key: \"_getIncompleteSVG\",\n    value: function _getIncompleteSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n      </svg>\";\n    }\n  }, {\n    key: \"addOverflowTooltip\",\n    value: function addOverflowTooltip() {\n      var _this3 = this;\n\n      var stepLabels = toArray(this.element.querySelectorAll(this.options.selectorLabel));\n      var tooltips = toArray(this.element.querySelectorAll(this.options.selectorTooltip));\n      stepLabels.forEach(function (step) {\n        if (step.scrollWidth > _this3.options.maxWidth) {\n          step.classList.add(_this3.options.classOverflowLabel);\n        }\n      });\n      tooltips.forEach(function (tooltip) {\n        var childText = tooltip.querySelector(_this3.options.selectorTooltipText);\n\n        if (childText.scrollHeight > _this3.options.tooltipMaxHeight) {\n          tooltip.classList.add(_this3.options.classTooltipMulti);\n        }\n      });\n    }\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n     * properties in this object are overriden for the instance being created.\n     * @member ProgressIndicator.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorStepElement] The CSS selector to find step elements.\n     * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n     * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n     * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n     * @property {string} [classStep] The className for a step element.\n     * @property {string} [classComplete] The className for a completed step element.\n     * @property {string} [classCurrent] The className for the current step element.\n     * @property {string} [classIncomplete] The className for a incomplete step element.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-progress]',\n        selectorStepElement: \".\".concat(prefix, \"--progress-step\"),\n        selectorCurrent: \".\".concat(prefix, \"--progress-step--current\"),\n        selectorIncomplete: \".\".concat(prefix, \"--progress-step--incomplete\"),\n        selectorComplete: \".\".concat(prefix, \"--progress-step--complete\"),\n        selectorLabel: \".\".concat(prefix, \"--progress-label\"),\n        selectorTooltip: \".\".concat(prefix, \"--tooltip\"),\n        selectorTooltipText: \".\".concat(prefix, \"--tooltip__text\"),\n        classStep: \"\".concat(prefix, \"--progress-step\"),\n        classComplete: \"\".concat(prefix, \"--progress-step--complete\"),\n        classCurrent: \"\".concat(prefix, \"--progress-step--current\"),\n        classIncomplete: \"\".concat(prefix, \"--progress-step--incomplete\"),\n        classOverflowLabel: \"\".concat(prefix, \"--progress-label-overflow\"),\n        classTooltipMulti: \"\".concat(prefix, \"--tooltip_multi\"),\n        maxWidth: 87,\n        tooltipMaxHeight: 21\n      };\n    }\n  }]);\n\n  ProgressIndicator.components = new WeakMap();\n  return ProgressIndicator;\n}(mixin(createComponent, initComponentBySearch));\n\nexport default ProgressIndicator;"]},"metadata":{},"sourceType":"module"}