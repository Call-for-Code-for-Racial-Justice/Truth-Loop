{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nexport var sortingPropTypes = {\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. `compareItems` has the following function signature:\n   *\n   * compareFunction :\n   *  (itemA: string, itemB: string, { locale: string }) => number\n   */\n  compareItems: PropTypes.func.isRequired,\n\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * `sortItems` has the following signature:\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/MultiSelect/MultiSelectPropTypes.js"],"names":["PropTypes","sortingPropTypes","compareItems","func","isRequired","sortItems"],"mappings":"AAAA;;;;;;AAMA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,IAAIC,gBAAgB,GAAG;AAC5B;;;;;;;AAOAC,EAAAA,YAAY,EAAEF,SAAS,CAACG,IAAV,CAAeC,UARD;;AAU5B;;;;;;;;;;;;;;;;;;AAkBAC,EAAAA,SAAS,EAAEL,SAAS,CAACG,IAAV,CAAeC;AA5BE,CAAvB","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nexport var sortingPropTypes = {\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. `compareItems` has the following function signature:\n   *\n   * compareFunction :\n   *  (itemA: string, itemB: string, { locale: string }) => number\n   */\n  compareItems: PropTypes.func.isRequired,\n\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * `sortItems` has the following signature:\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func.isRequired\n};"]},"metadata":{},"sourceType":"module"}