{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n'use strict';\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function (condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {\n      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/warning/browser.js"],"names":["warning","process","env","NODE_ENV","condition","format","args","len","arguments","length","Array","key","undefined","Error","test","argIndex","message","replace","console","error","x","module","exports"],"mappings":"AAAA;;;;;;;;AASA;AAEA;;;;;;;AAOA,IAAIA,OAAO,GAAG,YAAW,CAAE,CAA3B;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,OAAO,GAAG,UAASI,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAC1C,QAAIC,GAAG,GAAGC,SAAS,CAACC,MAApB;AACAH,IAAAA,IAAI,GAAG,IAAII,KAAJ,CAAUH,GAAG,GAAG,CAAN,GAAUA,GAAG,GAAG,CAAhB,GAAoB,CAA9B,CAAP;;AACA,SAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,GAAxB,EAA6BI,GAAG,EAAhC,EAAoC;AAClCL,MAAAA,IAAI,CAACK,GAAG,GAAG,CAAP,CAAJ,GAAgBH,SAAS,CAACG,GAAD,CAAzB;AACD;;AACD,QAAIN,MAAM,KAAKO,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CACJ,8DACA,kBAFI,CAAN;AAID;;AAED,QAAIR,MAAM,CAACI,MAAP,GAAgB,EAAhB,IAAuB,UAAD,CAAaK,IAAb,CAAkBT,MAAlB,CAA1B,EAAqD;AACnD,YAAM,IAAIQ,KAAJ,CACJ,iEACA,uDADA,GAC0DR,MAFtD,CAAN;AAID;;AAED,QAAI,CAACD,SAAL,EAAgB;AACd,UAAIW,QAAQ,GAAG,CAAf;AACA,UAAIC,OAAO,GAAG,cACZX,MAAM,CAACY,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,eAAOX,IAAI,CAACS,QAAQ,EAAT,CAAX;AACD,OAFD,CADF;;AAIA,UAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,QAAAA,OAAO,CAACC,KAAR,CAAcH,OAAd;AACD;;AACD,UAAI;AACF;AACA;AACA,cAAM,IAAIH,KAAJ,CAAUG,OAAV,CAAN;AACD,OAJD,CAIE,OAAMI,CAAN,EAAS,CAAE;AACd;AACF,GAnCD;AAoCD;;AAEDC,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"]},"metadata":{},"sourceType":"script"}