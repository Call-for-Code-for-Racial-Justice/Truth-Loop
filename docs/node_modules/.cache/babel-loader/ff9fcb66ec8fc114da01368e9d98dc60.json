{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<Object>} rows\n * @param {Array<Object>} headers\n * @returns {Object}\n */\n\nvar normalize = function normalize(rows, headers) {\n  var prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prevRowsByIds = prevState.rowsById;\n  var rowIds = new Array(rows.length);\n  var rowsById = {};\n  var cellsById = {};\n  rows.forEach(function (row, i) {\n    rowIds[i] = row.id; // Initialize the row info and state values, namely for selection and\n    // expansion\n\n    var id = row.id,\n        _row$isSelected = row.isSelected,\n        isSelected = _row$isSelected === void 0 ? false : _row$isSelected,\n        _row$isExpanded = row.isExpanded,\n        isExpanded = _row$isExpanded === void 0 ? false : _row$isExpanded,\n        _row$disabled = row.disabled,\n        disabled = _row$disabled === void 0 ? false : _row$disabled;\n    rowsById[id] = {\n      id: id,\n      isSelected: isSelected,\n      isExpanded: isExpanded,\n      disabled: disabled,\n      cells: new Array(headers.length)\n    }; // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n\n    headers.forEach(function (_ref, i) {\n      var key = _ref.key;\n      var id = getCellId(row.id, key); // Initialize the cell info and state values, namely for editing\n\n      cellsById[id] = {\n        id: id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      }; // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById\n  };\n};\n\nexport default normalize;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/DataTable/tools/normalize.js"],"names":["getCellId","normalize","rows","headers","prevState","arguments","length","undefined","prevRowsByIds","rowsById","rowIds","Array","cellsById","forEach","row","i","id","_row$isSelected","isSelected","_row$isExpanded","isExpanded","_row$disabled","disabled","cells","_ref","key","value","isEditable","isEditing","isValid","errors","info","header"],"mappings":"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","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<Object>} rows\n * @param {Array<Object>} headers\n * @returns {Object}\n */\n\nvar normalize = function normalize(rows, headers) {\n  var prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prevRowsByIds = prevState.rowsById;\n  var rowIds = new Array(rows.length);\n  var rowsById = {};\n  var cellsById = {};\n  rows.forEach(function (row, i) {\n    rowIds[i] = row.id; // Initialize the row info and state values, namely for selection and\n    // expansion\n\n    var id = row.id,\n        _row$isSelected = row.isSelected,\n        isSelected = _row$isSelected === void 0 ? false : _row$isSelected,\n        _row$isExpanded = row.isExpanded,\n        isExpanded = _row$isExpanded === void 0 ? false : _row$isExpanded,\n        _row$disabled = row.disabled,\n        disabled = _row$disabled === void 0 ? false : _row$disabled;\n    rowsById[id] = {\n      id: id,\n      isSelected: isSelected,\n      isExpanded: isExpanded,\n      disabled: disabled,\n      cells: new Array(headers.length)\n    }; // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n\n    headers.forEach(function (_ref, i) {\n      var key = _ref.key;\n      var id = getCellId(row.id, key); // Initialize the cell info and state values, namely for editing\n\n      cellsById[id] = {\n        id: id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      }; // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById\n  };\n};\n\nexport default normalize;"]},"metadata":{},"sourceType":"module"}