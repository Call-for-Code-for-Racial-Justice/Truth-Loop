{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport InlineCheckbox from '../InlineCheckbox';\nimport RadioButton from '../RadioButton';\n\nvar TableSelectRow = function TableSelectRow(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      disabled = _ref.disabled,\n      radio = _ref.radio,\n      className = _ref.className;\n  var selectionInputProps = {\n    id: id,\n    name: name,\n    onClick: onSelect,\n    checked: checked,\n    disabled: disabled\n  };\n  var InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  return React.createElement(\"td\", {\n    className: className\n  }, React.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ariaLabel: ariaLabel\n  })));\n};\n\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string\n};\nexport default TableSelectRow;","map":{"version":3,"sources":["/Users/khadijaal-selini/call-for-code/policy-truth-frontend/node_modules/carbon-components-react/es/components/DataTable/TableSelectRow.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","PropTypes","React","InlineCheckbox","RadioButton","TableSelectRow","_ref","ariaLabel","checked","id","name","onSelect","disabled","radio","className","selectionInputProps","onClick","InlineInputComponent","createElement","labelText","hideLabel","propTypes","string","isRequired","bool","func"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport InlineCheckbox from '../InlineCheckbox';\nimport RadioButton from '../RadioButton';\n\nvar TableSelectRow = function TableSelectRow(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      disabled = _ref.disabled,\n      radio = _ref.radio,\n      className = _ref.className;\n  var selectionInputProps = {\n    id: id,\n    name: name,\n    onClick: onSelect,\n    checked: checked,\n    disabled: disabled\n  };\n  var InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  return React.createElement(\"td\", {\n    className: className\n  }, React.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ariaLabel: ariaLabel\n  })));\n};\n\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string\n};\nexport default TableSelectRow;"]},"metadata":{},"sourceType":"module"}