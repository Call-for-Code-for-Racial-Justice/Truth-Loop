"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _carbonComponents = require("carbon-components");

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/warning--filled/16"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefix = _carbonComponents.settings.prefix;

var DefaultCharCounter = function DefaultCharCounter(_ref) {
  var disabled = _ref.disabled,
      count = _ref.count,
      maxLength = _ref.maxLength;
  var charCounterClasses = (0, _classnames.default)("".concat(prefix, "--text-area--character-counter"), _defineProperty({}, "".concat(prefix, "--text-area--character-counter--disabled"), disabled));
  return _react.default.createElement("span", {
    className: charCounterClasses
  }, _react.default.createElement("span", {
    className: "".concat(prefix, "--text-area--character-counter--length")
  }, count), "/", _react.default.createElement("span", {
    className: "".concat(prefix, "--text-area--character-counter--maxlength")
  }, maxLength));
};

var TextArea = function TextArea(_ref2) {
  var _classNames2, _classNames4;

  var className = _ref2.className,
      id = _ref2.id,
      labelText = _ref2.labelText,
      hideLabel = _ref2.hideLabel,
      _onChange = _ref2.onChange,
      _onClick = _ref2.onClick,
      invalid = _ref2.invalid,
      invalidText = _ref2.invalidText,
      helperText = _ref2.helperText,
      light = _ref2.light,
      charCount = _ref2.charCount,
      maxLength = _ref2.maxLength,
      _ref2$renderCharCount = _ref2.renderCharCounter,
      CharCounter = _ref2$renderCharCount === void 0 ? DefaultCharCounter : _ref2$renderCharCount,
      other = _objectWithoutProperties(_ref2, ["className", "id", "labelText", "hideLabel", "onChange", "onClick", "invalid", "invalidText", "helperText", "light", "charCount", "maxLength", "renderCharCounter"]);

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      textareaVal = _useState2[0],
      setInput = _useState2[1];

  var textareaProps = {
    id: id,
    onChange: function onChange(evt) {
      if (!other.disabled) {
        _onChange(evt);
      }
    },
    onClick: function onClick(evt) {
      if (!other.disabled) {
        _onClick(evt);
      }
    },
    maxLength: maxLength || null
  };
  var labelClasses = (0, _classnames.default)("".concat(prefix, "--label"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefix, "--visually-hidden"), hideLabel), _defineProperty(_classNames2, "".concat(prefix, "--label--disabled"), other.disabled), _classNames2));

  var label = function () {
    var labelContent = labelText ? _react.default.createElement("label", {
      htmlFor: id,
      className: labelClasses
    }, labelText) : null;

    if (labelContent && charCount) {
      return _react.default.createElement("div", {
        className: "".concat(prefix, "--text-area__character-counter-title")
      }, labelContent, _react.default.createElement(CharCounter, {
        disabled: other.disabled,
        count: textareaVal.length,
        maxLength: maxLength
      }));
    }

    return labelContent;
  }();

  var helperTextClasses = (0, _classnames.default)("".concat(prefix, "--form__helper-text"), _defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), other.disabled));

  var helper = function () {
    var helperContent = helperText ? _react.default.createElement("div", {
      className: helperTextClasses
    }, helperText) : null;

    if (!labelText && charCount) {
      return _react.default.createElement("div", {
        className: "".concat(prefix, "--text-area__character-counter-title")
      }, helperContent, _react.default.createElement(CharCounter, {
        disabled: other.disabled,
        count: textareaVal.length,
        maxLength: maxLength
      }));
    }

    return helperContent;
  }();

  var errorId = id + '-error-msg';
  var error = invalid ? _react.default.createElement("div", {
    className: "".concat(prefix, "--form-requirement"),
    id: errorId
  }, invalidText) : null;
  var textareaClasses = (0, _classnames.default)("".concat(prefix, "--text-area"), className, (_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefix, "--text-area--light"), light), _defineProperty(_classNames4, "".concat(prefix, "--text-area--invalid"), invalid), _classNames4));

  var input = _react.default.createElement("textarea", _extends({}, other, textareaProps, {
    className: textareaClasses,
    "aria-invalid": invalid || null,
    "aria-describedby": invalid ? errorId : null,
    disabled: other.disabled,
    value: textareaVal,
    onInput: function onInput(e) {
      return setInput(e.target.value);
    }
  }));

  return _react.default.createElement("div", {
    className: "".concat(prefix, "--form-item")
  }, label, helper, _react.default.createElement("div", {
    className: "".concat(prefix, "--text-area__wrapper"),
    "data-invalid": invalid || null
  }, invalid && _react.default.createElement(_.default, {
    className: "".concat(prefix, "--text-area__invalid-icon")
  }), input), error);
};

TextArea.propTypes = {
  /**
   * Provide a custom className that is applied directly to the underlying
   * <textarea> node
   */
  className: _propTypes.default.string,

  /**
   * Specify the `cols` attribute for the underlying <textarea> node
   */
  cols: _propTypes.default.number,

  /**
   * Optionally provide the default value of the <textarea>
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Specify whether the control is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide a unique identifier for the control
   */
  id: _propTypes.default.string,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: _propTypes.default.node.isRequired,

  /**
   * Optionally provide an `onChange` handler that is called whenever <textarea>
   * is updated
   */
  onChange: _propTypes.default.func,

  /**
   * Optionally provide an `onClick` handler that is called whenever the
   * <textarea> is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Specify the placeholder attribute for the <textarea>
   */
  placeholder: _propTypes.default.string,

  /**
   * Specify the rows attribute for the <textarea>
   */
  rows: _propTypes.default.number,

  /**
   * Provide the current value of the <textarea>
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Specify whether the control is currently invalid
   */
  invalid: _propTypes.default.bool,

  /**
   * Provide the text that is displayed when the control is in an invalid state
   */
  invalidText: _propTypes.default.string,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: _propTypes.default.node,

  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: _propTypes.default.bool,

  /**
   * Specify whether you want the light version of this control
   */
  light: _propTypes.default.bool,

  /**
   * Specify whether the character counter is shown
   */
  charCount: _propTypes.default.bool,

  /**
   * The maximum allowed input value length
   */
  maxLength: _propTypes.default.number
};
TextArea.defaultProps = {
  disabled: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  placeholder: '',
  rows: 4,
  cols: 50,
  invalid: false,
  invalidText: '',
  helperText: '',
  light: false
};
var _default = TextArea;
exports.default = _default;